{"name":"Minemail","tagline":"utilities to mine email","body":"Routines for analyzing email records\r\n\r\nThe utilities are meant to help parse data sets and \r\ndevelop an understanding of patterns.\r\n\r\nUSAGE:\r\n\r\nWhen working with bounce.io data sources it's convenient (and faster) to inspect\r\na smaller subset of records rather than the full dataset.  The commands are\r\nfilters and expect data on STDIN.  You can feed subsets of the source data file \r\nwith a simple head command like this:\r\n\r\nhead -10 data/csv_data_file | bin/geturi\r\n\r\nA more complex example that add on URI parsing:\r\n\r\nhead -10 data/csv_data_file | geturi | grep -v '^$' | python bin/parseurl-demo.py\r\n\r\nThe parseurl-demo.py should be extended to inspect the features of the URL.\r\n\r\nFor example, the script funargs_itemset parses the query parameters in a URL and outputs\r\nthe argument names as a space separated list of terms.  \r\n\r\ngeturi < data/csv_data_file | python bin/funargs_itemset > data/args_data_file\r\n\r\nThe output can be fed into fpgrowth in order to explore frequent patterns.\r\n\r\nfpgrowth -s1 -f\" \" data/args_data_file data/fg_args_data_file\r\n\r\nThe query parameter of the URL is what is found after the ? in the URL.  From this \r\nperspective, the \"function parameters\" are key=value pairs separated by &.  The\r\nscript funargs_itemset parses out all the keys in a query parameter.\r\n\r\nThe app fpgrowth can be found on Bergelt's web page:\r\n\r\nhttp://www.borgelt.net//fpgrowth.html\r\n\r\n\r\nMODULE:\r\n\r\nIf you use environment modules you can add the bin dir to your path with the following\r\nrun from the top level project directory:\r\n\r\n  module use `pwd`\r\n  module load minemail\r\n`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}